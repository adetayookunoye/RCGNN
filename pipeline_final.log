qt.qpa.plugin: Could not find the Qt platform plugin "wayland" in ""
‚úÖ Loaded predicted adjacency: (13, 13)
‚úÖ Loaded ground truth adjacency: (13, 13)

================================================================================
THRESHOLD OPTIMIZATION
================================================================================

‚úÖ Optimal threshold found: 0.001000
   F1 Score: 0.0690
   Precision: 0.0625
   Recall: 0.0769
   SHD: 27
   Sparsity: 9.47%

üìä Generating visualizations...
‚úÖ Saved threshold analysis: artifacts/threshold_analysis.png
‚úÖ Saved threshold comparison table: artifacts/threshold_comparison_table.png
‚úÖ Saved threshold report: artifacts/threshold_report.txt

================================================================================
THRESHOLD OPTIMIZATION REPORT
================================================================================

## RECOMMENDED THRESHOLD
Value: 0.001000
F1 Score: 0.0690
Precision: 0.0625
Recall: 0.0769
Structural Hamming Distance: 27
Predicted Sparsity: 9.5% non-zero edges

## INTERPRETATION
At threshold 0.001000:
  ‚Ä¢ 1 True Positives (correct edge predictions)
  ‚Ä¢ 15 False Positives (incorrect edge predictions)
  ‚Ä¢ 12 False Negatives (missed edges)
  ‚Ä¢ 141 True Negatives (correct non-edge predictions)

## RECOMMENDATIONS
‚ö†Ô∏è  WARNING: Very low sparsity (<10%)
   Consider raising threshold to reduce false positives
‚ö†Ô∏è  Low precision - many false positives
   Consider raising threshold for stricter edge selection
‚ö†Ô∏è  Low recall - missing many true edges
   Consider lowering threshold to capture more relationships

## USAGE IN DOWNSTREAM ANALYSIS
Use threshold: 0.001000

Python:
  A_binary = (A_pred > 0.001000).astype(int)

Command line:
  python scripts/validate_and_visualize.py --threshold 0.001000

## FULL THRESHOLD RESULTS
Threshold    Precision    Recall       F1           SHD      Sparsity    
--------------------------------------------------------------------------------
0.001000     0.0625       0.0769       0.0690       27       9.5%        
0.001135     0.0625       0.0769       0.0690       27       9.5%        
0.001289     0.0625       0.0769       0.0690       27       9.5%        
0.001463     0.0625       0.0769       0.0690       27       9.5%        
0.001661     0.0625       0.0769       0.0690       27       9.5%        
0.001885     0.0625       0.0769       0.0690       27       9.5%        
0.002140     0.0625       0.0769       0.0690       27       9.5%        
0.002430     0.0625       0.0769       0.0690       27       9.5%        
0.002758     0.0625       0.0769       0.0690       27       9.5%        
0.003132     0.0625       0.0769       0.0690       27       9.5%        
0.003555     0.0625       0.0769       0.0690       27       9.5%        
0.004036     0.0625       0.0769       0.0690       27       9.5%        
0.004582     0.0625       0.0769       0.0690       27       9.5%        
0.005201     0.0625       0.0769       0.0690       27       9.5%        
0.005904     0.0625       0.0769       0.0690       27       9.5%        
0.006703     0.0625       0.0769       0.0690       27       9.5%        
0.007609     0.0625       0.0769       0.0690       27       9.5%        
0.008638     0.0625       0.0769       0.0690       27       9.5%        
0.009806     0.0625       0.0769       0.0690       27       9.5%        
0.011133     0.0625       0.0769       0.0690       27       9.5%        
================================================================================

‚úÖ Threshold optimization complete!
   Best threshold: 0.001000
   Visualizations saved to: artifacts/
Traceback (most recent call last):
  File "/home/adetayo/Documents/CSCI Forms/Adetayo Research/Robust Causal Graph Neural Networks under Compound Sensor Corruptions/rcgnn/scripts/visualize_environment_structure.py", line 330, in <module>
    main()
  File "/home/adetayo/Documents/CSCI Forms/Adetayo Research/Robust Causal Graph Neural Networks under Compound Sensor Corruptions/rcgnn/scripts/visualize_environment_structure.py", line 297, in main
    model = RCGNN(d, mc)
            ^^^^^^^^^^^^
  File "/home/adetayo/Documents/CSCI Forms/Adetayo Research/Robust Causal Graph Neural Networks under Compound Sensor Corruptions/rcgnn/src/models/rcgnn.py", line 146, in __init__
    self.tri_encoder = TriLatentEncoder(d, latent_dim, hidden_dim).to(device)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/adetayo/Documents/CSCI Forms/Adetayo Research/Robust Causal Graph Neural Networks under Compound Sensor Corruptions/rcgnn/src/models/rcgnn.py", line 17, in __init__
    nn.Linear(hidden_dim, latent_dim)
  File "/home/adetayo/anaconda3/lib/python3.12/site-packages/torch/nn/modules/linear.py", line 98, in __init__
    self.weight = Parameter(torch.empty((out_features, in_features), **factory_kwargs))
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: empty() received an invalid combination of arguments - got (tuple, dtype=NoneType, device=NoneType), but expected one of:
 * (tuple of ints size, *, tuple of names names, torch.memory_format memory_format, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)
 * (tuple of ints size, *, torch.memory_format memory_format, Tensor out, torch.dtype dtype, torch.layout layout, torch.device device, bool pin_memory, bool requires_grad)

qt.qpa.plugin: Could not find the Qt platform plugin "wayland" in ""
‚úÖ Loaded data: X.shape=(9448, 24, 13), A_true.shape=(13, 13)
‚úÖ Loaded RC-GNN adjacency: (13, 13)

================================================================================
BASELINE COMPARISON
================================================================================

RC-GNN:
  Precision: 0.0000
  Recall: 0.0000
  F1 Score: 0.0000
  SHD: 18
  TP/FP/FN: 0/5/13

Correlation:
  Precision: 0.0870
  Recall: 0.3077
  F1 Score: 0.1356
  SHD: 51
  TP/FP/FN: 4/42/9

NOTears-lite:
  Precision: 0.0870
  Recall: 0.3077
  F1 Score: 0.1356
  SHD: 51
  TP/FP/FN: 4/42/9

üìä Generating visualizations...

‚úÖ Saved comparison plot: artifacts/baseline_comparison.png
‚úÖ Saved adjacency comparison: artifacts/adjacency_methods_comparison.png

‚úÖ Saved comparison report: artifacts/baseline_comparison_report.txt

================================================================================
BASELINE COMPARISON REPORT
================================================================================

## OVERVIEW
Methods compared: RC-GNN, Correlation, NOTears-lite
Ground truth edges: 13 / 169

## RESULTS SUMMARY
Method               Precision    Recall       F1           SHD     
--------------------------------------------------------------------------------
RC-GNN               0.0000       0.0000       0.0000       18      
Correlation          0.0870       0.3077       0.1356       51      
NOTears-lite         0.0870       0.3077       0.1356       51      

## DETAILED ANALYSIS
Best F1 Score: Correlation (0.1356)
Best Precision: Correlation (0.0870)
Best Recall: Correlation (0.3077)
Best SHD: RC-GNN (18)

## INTERPRETATION

Precision: % of predicted edges that are correct
Recall: % of true edges that were found
F1: Harmonic mean (balanced precision-recall)
SHD: Number of edge disagreements with ground truth

## CONCLUSIONS
‚ö†Ô∏è  Correlation shows poor performance (F1 < 0.5)
   ‚Üí May need different approach or more data

================================================================================

‚úÖ Baseline comparison complete!

================================================================================
üöÄ FULL RC-GNN TRAINING + ANALYSIS PIPELINE
================================================================================

üìä Loading UCI Air Quality dataset...
   Path: data/interim/uci_air
‚úÖ Dataset: 13 features, 6613 train, 1417 val samples

üèóÔ∏è  Initializing RC-GNN model...
‚úÖ Model on cpu

üìã Loading ground truth...
‚úÖ Ground truth: 13 edges

================================================================================
[STEP 1/5] TRAINING RC-GNN MODEL
================================================================================
Epoch 01/8 | Train Loss: 16767.1890 | F1: 0.0 | SHD: 18
   ‚≠ê New best SHD: 18.0
Epoch 02/8 | Train Loss: 70.0818 | F1: 0.08333333333333334 | SHD: 22
Epoch 03/8 | Train Loss: 26.5341 | F1: 0.13793103448275862 | SHD: 25
Epoch 04/8 | Train Loss: 19.4081 | F1: 0.06896551724137931 | SHD: 27
Epoch 05/8 | Train Loss: 13.8481 | F1: 0.13793103448275862 | SHD: 25
Epoch 06/8 | Train Loss: 11.6580 | F1: 0.24999999999999994 | SHD: 18
Epoch 07/8 | Train Loss: 11.2693 | F1: 0.0 | SHD: 19
Epoch 08/8 | Train Loss: 10.3163 | F1: 0.0 | SHD: 29

‚úÖ Training complete! Best SHD: 18
   Time: 60.3s
   Checkpoint: artifacts/checkpoints/rcgnn_best.pt
   Adjacency: artifacts/adjacency/A_mean.npy

================================================================================
[STEP 2/5] OPTIMIZING BINARY THRESHOLD
================================================================================
‚úÖ Threshold optimization complete!

================================================================================
[STEP 3/5] ANALYZING PER-ENVIRONMENT STRUCTURES
================================================================================
‚úÖ Environment analysis complete!

================================================================================
[STEP 4/5] COMPARING AGAINST BASELINE METHODS
================================================================================
‚úÖ Baseline comparison complete!

================================================================================
[STEP 6/5] RUNNING ORIGINAL TRAINING SCRIPT
================================================================================
‚ö†Ô∏è  Original script error: Traceback (most recent call last):
  File "<string>", line 5, in <module>
  File "<string>", line 23, in <module>
ModuleNotFoundError: No module named 'path_helper'


================================================================================
[STEP 5/5] GENERATING FINAL SUMMARY
================================================================================

üìä Summary saved to: artifacts/pipeline_summary.json

================================================================================
‚úÖ FULL PIPELINE COMPLETE!
================================================================================

Generated outputs:
  ‚úì artifacts/checkpoints/rcgnn_best.pt (0.03 MB)
  ‚úì artifacts/adjacency/A_mean.npy (0.00 MB)
  ‚úì artifacts/training_metrics.json (0.00 MB)

Total time: 60.3s

Next steps:
1. Review artifacts/pipeline_summary.json for results
2. Check artifacts/training_metrics.json for detailed metrics
3. View visualizations in artifacts/ directory
4. Compare RC-GNN vs baselines
